JavaScript Execution Context â€“ How JS Works Behind the Scenes
when a js can run the JavaScript code then it will always take all the code in global execution context in which all value of program can initialize to this method object
after this process the js will devide to code in two part one is memory phase where the all varible and method will store and define then and other is a execution context part where the progarm can run and executes the variale value

Question :- What is the Execution Context?
Answer :- When the JavaScript engine scans a script file, it makes an environment called the Execution Context that handles the entire transformation and execution of the code.

There are two types of execution contexts: global and function. The global execution context is created when a JavaScript script first starts to run, and it represents the global scope in JavaScript. A function execution context is created whenever a function is called, representing the function's local scope.


Phases of the JavaScript Execution Context
There are two phases of JavaScript execution context:

1) Creation phase: In this phase, the JavaScript engine creates the execution context and sets up the script's environment. It determines the values of variables and functions and sets up the scope chain for the execution context.

2) Execution phase: In this phase, the JavaScript engine executes the code in the execution context. It processes any statements or expressions in the script and evaluates any function calls.



Question :- What is the Call Stack?
Answer :- To keep the track of all the contexts, including global and functional, the JavaScript engine uses a call stack. A call stack is also known as an 'Execution Context Stack', 'Runtime Stack', or 'Machine Stack'.

It uses the LIFO principle (Last-In-First-Out). When the engine first starts executing the script, it creates a global context and pushes it on the stack. Whenever a function is invoked, similarly, the JS engine creates a function stack context for the function and pushes it to the top of the call stack and starts executing it.

When execution of the current function is complete, then the JavaScript engine will automatically remove the context from the call stack and it goes back to its parent.





JavaScript  is a synchronous languagae
js can run in a single thread

ðŸ”¹ Synchronous Nature
By default, JavaScript executes code line by line, waiting for each line to finish before moving to the next. This is known as blocking behavior.

ðŸ”¹ Asynchronous Capabilities
JavaScript can also handle asynchronous tasks, meaning it can initiate a task and move on without waiting for it to complete. This is achieved using:

Callbacks
Promises
async/await
APIs like setTimeout, fetch, and others


ðŸ”¹ What Does Single-Threaded Mean in JavaScript?
A single-threaded language means that JavaScript can execute one task at a time in a single sequence. It has one call stack that handles one command after another, without any parallel execution.



 => Stack Memory (Primitive) 	LIFO (Last In, First Out)
 Primitive types have fixed and small sizes.
Stack memory stores data sequentially and automatically cleans up when variables go out of scope.

=> heap memory 
it will store the array , object and give the orignal reference of the element when needed and we will modified this 

What is XML? (eXtensible Markup Language)
XML is a markup language used to store and transport data in a structured and readable format. Unlike HTML, which defines how data should be displayed, XML focuses on what data is. It is both human-readable and machine-readable.

What is AJAX? (Asynchronous JavaScript and XML)
AJAX is a technique that enables web pages to be updated asynchronously by exchanging small amounts of data with the server in the background. This means parts of a web page can update without needing to reload the entire page.

XML: A format for storing and transporting data.
AJAX: A technique to fetch data from a server asynchronously using JavaScript, often utilizing XML or JSON.


=>This keyword in js

# Understanding the `this` Keyword in Programming

The `this` keyword in programming is a special reference used in object-oriented languages to refer to the current instance of an object. Its behavior varies depending on the language and context.

## **The `this` Keyword in JavaScript**
### **Behavior in Different Contexts**
- In **global scope**, `this` refers to the global object (`window` in browsers, `global` in Node.js).
- Inside a **method**, `this` refers to the object that owns the method.
- In a **constructor function or class**, `this` refers to the newly created instance.
- In an **event handler**, `this` refers to the element that triggered the event.
- In **arrow functions**, `this` is lexically inherited (it takes `this` from its surrounding scope).

### **Example in JavaScript:**
```javascript
class Person {
  constructor(name) {
    this.name = name; // "this" refers to the instance
  }
  greet() {
    console.log(`Hello, my name is ${this.name}`);
  }
}
const person1 = new Person("Kamal");
person1.greet(); // Output: Hello, my name is Kamal
```

---

## **The `this` Keyword in Java**
### **Behavior in Different Contexts**
- `this` is used inside a class to refer to the current object.
- It helps differentiate **instance variables** from **parameters** with the same name.
- It can be used to call another constructor in the same class (`this()`).

### **Example in Java:**
```java
class Person {
    String name;
    Person(String name) {
        this.name = name; // "this" refers to the current object
    }
    void greet() {
        System.out.println("Hello, my name is " + this.name);
    }
}
public class Main {
    public static void main(String[] args) {
        Person p = new Person("Kamal");
        p.greet(); // Output: Hello, my name is Kamal
    }
}
```

---

## **The `this` Keyword in JavaScript - Simplified Explanation**
### **1. `this` in the Global Scope**
```javascript
console.log(this); // In a browser, it prints "window"
```
- In browsers, the global object is `window`.
- In Node.js, the global object is `global`.

### **2. `this` Inside an Object Method**
```javascript
const person = {
  name: "Kamal",
  greet: function () {
    console.log("Hello, my name is " + this.name);
  }
};
person.greet(); // Output: Hello, my name is Kamal
```
- Here, `this.name` refers to `person.name`.

### **3. `this` in a Regular Function (Not Inside an Object)**
```javascript
function show() {
  console.log(this); // In a browser, it prints "window"
}
show();
```
- But if you use **"use strict"**, `this` will be `undefined`.

### **4. `this` in a Constructor Function**
```javascript
function Person(name) {
  this.name = name;
}
const p1 = new Person("Kamal");
console.log(p1.name); // Output: Kamal
```
- `this.name = name;` assigns a property to the newly created object.

### **5. `this` in Arrow Functions**
```javascript
const person = {
  name: "Kamal",
  greet: () => {
    console.log("Hello, my name is " + this.name);
  }
};
person.greet(); // Output: Hello, my name is undefined
```
- Arrow functions **do not** have their own `this`. Instead, they inherit `this` from their surrounding scope.

### **6. `this` in Event Listeners**
```javascript
document.getElementById("btn").addEventListener("click", function () {
  console.log(this); // Refers to the button element
});
```
- In an event listener, `this` refers to the **HTML element** that triggered the event.

### **7. Changing `this` using `call()`, `apply()`, and `bind()`**
```javascript
function sayHello() {
  console.log("Hello, " + this.name);
}
const person = { name: "Kamal" };
sayHello.call(person); // Output: Hello, Kamal
```
- These methods allow you to manually set `this` to a specific object.

---

## **Summary Table**
| Where `this` is used        | What `this` refers to |
|-----------------------------|----------------------|
| Global scope               | `window` (or `global` in Node.js) |
| Inside an object method    | The object itself |
| Inside a regular function  | `window` (or `undefined` in strict mode) |
| Inside a constructor function | The new object being created |
| Inside an arrow function   | `this` from the surrounding scope |
| Inside an event listener   | The element that triggered the event |



